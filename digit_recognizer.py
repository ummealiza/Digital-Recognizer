# -*- coding: utf-8 -*-
"""digit recognizer

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13hCnk0T6-7snpJgONtVenGmbpzs3baoJ
"""

import numpy as np 
import pandas as pd 
import tensorflow as tf 
import matplotlib.pyplot as plt 
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

df = pd.read_csv("/content/train.csv")

df.head()

df.shape

# print a digit 
digit = df.iloc[1][1:].values.reshape(28,28)
plt.imshow(digit,cmap='binary')
print("digit is ",df.iloc[1][0])

# print 25 no 
plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    digit = df.iloc[i][1:].values.reshape(28,28)
    plt.imshow(digit, cmap = 'binary')
    plt.title(df.iloc[i][0])

x  = df.drop("label",axis=1)
y = df['label']

# normalise the input 
x = x/255.0

x_train , x_test ,y_train , y_test = train_test_split(x,y,test_size = 0.2 )

model = tf.keras.Sequential([
    tf.keras.layers.Dense(128,activation ='relu',input_shape=(784,)),
    # tf.keras.layers.Dense(64,activation = 'relu'),
    tf.keras.layers.Dense(32,activation = 'relu'),
    tf.keras.layers.Dense(16,activation='relu'),
    # tf.keras.layers.Dense(8,activation='relu'),
    tf.keras.layers.Dense(10,activation = 'softmax')
])

# model 
model.summary()

model.compile(optimizer='adam',loss="sparse_categorical_crossentropy",metrics=['accuracy'])

model.fit(x_train,y_train , epochs=20, validation_data =( x_test,y_test))

# classification matrix 
y_pred= model.predict(x_test)
y_pred = np.argmax(y_pred,axis=1)
print(classification_report(y_pred,y_test))